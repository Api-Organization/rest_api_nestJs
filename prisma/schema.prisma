generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


model Links {
  id         String    @id @default(uuid())
  url        String
  note_id    String?
  created_at DateTime? @default(now())
  notes      Notes?    @relation(fields: [note_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([note_id], map: "Links_note_id_fkey")
}

model Notes {
  id         String    @id @default(uuid())
  title      String?
  time       String?
  user_id    String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  content    String?
  isUrgent   String?
  links      Links[]
}

model Faq {
  id         String     @id @default(uuid())
  question   String
  answer     String
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())
  Products   Products[] @relation("FaqToProducts")
}

model Files {
  id         String      @id @default(uuid())
  link       String
  created_at DateTime?   @default(now())
  updated_at DateTime?   @default(now())
  Products   Products[]  @relation("FilesToProducts")
  Reviewers  Reviewers[] @relation("FilesToReviewers")
}

model Reviewers {
  id          String     @id @default(uuid())
  name        String
  description String?
  created_at  DateTime?  @default(now())
  updated_at  DateTime?  @default(now())
  Files       Files[]    @relation("FilesToReviewers")
  Products    Products[] @relation("ProductsToReviewers")
}

model Accounts {
  id          String        @id @default(uuid())
  site        String?
  tool        String?
  email       String?
  password    String?
  created_at  DateTime?     @default(now())
  updated_at  DateTime?     @default(now())
  permissions Permissions[] @relation("AccountsToPermissions")
}

model Permissions {
  id          String     @id @default(uuid())
  name        String     @unique
  created_at  DateTime?  @default(now())
  updated_at  DateTime?  @default(now())
  description String?
  Accounts    Accounts[] @relation("AccountsToPermissions")
  Products    Products[] @relation("PermissionsToProducts")
  Users       Users[]    @relation("PermissionsToUsers")
}

model Products {
  id          String        @id @default(uuid())
  price       String?
  description String?
  photo       String?
  time        String?
  created_at  DateTime?     @default(now())
  updated_at  DateTime?     @default(now())
  name        String
  stock       String?
  active      Boolean?
  Payments    Payments[]
  Faq         Faq[]         @relation("FaqToProducts")
  Files       Files[]       @relation("FilesToProducts")
  Permissions Permissions[] @relation("PermissionsToProducts")
  Reviewers   Reviewers[]   @relation("ProductsToReviewers")
}

model Users {
  id                 String         @id @default(uuid())
  name               String
  number             String?
  status             String?
  role               String?
  email              String         @unique
  password           String
  refresh_Token      String?
  deviceLimit        Int?
  created_at         DateTime?      @default(now())
  updated_at         DateTime?      @default(now())
  stripe_customer_id String?
  isEmailConfirmed   Boolean?
  plataform          String?
  Address            Address[]
  Discount           Discount[]
  Payments           Payments[]
  Subscription       Subscription[]
  permissions        Permissions[]  @relation("PermissionsToUsers")
  Devices            Devices[]
}

model Devices {
  id         String    @id @default(uuid())
  name       String
  userId     String
  device     String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  Users      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                     String    @id @default(uuid())
  userId                 String
  stripe_subscription_id String
  status                 String?
  active                 Boolean
  current_period_start   DateTime?
  current_period_end     DateTime?
  cancel_at_period_end   Boolean
  cancel_at              DateTime?
  canceled_at            DateTime?
  ended_at               DateTime?
  default_payment_method String?
  metadata               String?
  Users                  Users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Subscription_userId_fkey")
}

model Address {
  id                 String  @id @default(uuid())
  billing_details_id String?
  city               String
  country            String
  postal_code        String
  state              String
  line1              String
  metadata           String?
  userId             String
  Users              Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Address_userId_fkey")
}

model Payments {
  id         String    @id @default(uuid())
  receiptId  String
  method     method
  status     String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  productId  String
  userId     String
  products   Products  @relation(fields: [productId], references: [id], onDelete: Cascade)
  Users      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId], map: "Payments_productId_fkey")
  @@index([userId], map: "Payments_userId_fkey")
}

model Price {
  id                String @id @default(uuid())
  subscription_id   String
  stripe_price_id   String
  stripe_product_id String
  amount            Int
  label             String
  description       String
}

model Coupon {
  id                 String   @id @default(uuid())
  stripe_coupon_id   String
  valid              Boolean
  amount_off         Int
  currency           String
  duration           String
  duration_in_months Int
  max_redemptions    Int
  redeem_by          DateTime
  times_redeemed     Int
  discount_id        String
  metadata           String
}

model Discount {
  id                 String   @id @default(uuid())
  stripe_discount_id String
  subscription_id    String
  user_id            String
  start              DateTime
  end                DateTime
  promo_code         String
  metadata           String
  user               Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "Discount_user_id_fkey")
}

enum method {
  CREDIT_CARD
  DEBIT_CARD
  BANK_SLIP
  PIX
}
